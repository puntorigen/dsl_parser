!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.npmPackageES6DSLparser=e()}(this,function(){"use strict";function t(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function e(t,e){return t(e={exports:{}},e.exports),e.exports}var r=e(function(t){!function(e){var r,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s=e.regeneratorRuntime;if(s)t.exports=s;else{(s=e.regeneratorRuntime=t.exports).wrap=g;var f="suspendedStart",l="suspendedYield",d="executing",p="completed",h={},v={};v[u]=function(){return this};var _=Object.getPrototypeOf,m=_&&_(_(P([])));m&&m!==n&&o.call(m,u)&&(v=m);var y=E.prototype=x.prototype=Object.create(v);O.prototype=y.constructor=E,E.constructor=O,E[c]=O.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===O||"GeneratorFunction"===(e.displayName||e.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(y),t},s.awrap=function(t){return{__await:t}},j(w.prototype),w.prototype[a]=function(){return this},s.AsyncIterator=w,s.async=function(t,e,r,n){var o=new w(g(t,e,r,n));return s.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},j(y),y[c]="Generator",y[u]=function(){return this},y.toString=function(){return"[object Generator]"},s.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},s.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(I),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,o){return a.type="throw",a.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return n("end");if(this.prev>=u.tryLoc){var c=o.call(u,"catchLoc"),s=o.call(u,"finallyLoc");if(c&&s){if(u.catchLoc>this.prev)return n(u.catchLoc,!0);if(u.finallyLoc>this.prev)return n(u.finallyLoc)}else if(c){if(u.catchLoc>this.prev)return n(u.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(u.finallyLoc>this.prev)return n(u.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(this.prev>=n.tryLoc&&o.call(n,"finallyLoc")&&n.finallyLoc>this.prev){var i=n;break}}!i||"break"!==t&&"continue"!==t||i.tryLoc>e||e>i.finallyLoc||(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),I(r),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;I(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:P(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),h}}}function g(t,e,r,n){var o=Object.create((e&&e.prototype instanceof x?e:x).prototype),i=new k(n||[]);return o._invoke=function(t,e,r){var n=f;return function(o,i){if(n===d)throw Error("Generator is already running");if(n===p){if("throw"===o)throw i;return S()}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var a=L(u,r);if(a){if(a===h)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=b(t,e,r);if("normal"===c.type){if(n=r.done?p:l,c.arg===h)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=p,r.method="throw",r.arg=c.arg)}}}(t,r,i),o}function b(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function O(){}function E(){}function j(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function w(t){var e;this._invoke=function(r,n){function i(){return new Promise(function(e,i){!function e(r,n,i,u){var a=b(t[r],t,n);if("throw"!==a.type){var c=a.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,i,u)},function(t){e("throw",t,i,u)}):Promise.resolve(s).then(function(t){c.value=t,i(c)},u)}u(a.arg)}(r,n,e,i)})}return e=e?e.then(i,i):i()}}function L(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,L(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=b(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,h;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,h):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function z(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function I(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(z,this),this.reset(!0)}function P(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(o.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:S}}function S(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())}),n=Object.freeze({default:r,__moduleExports:r}),o=n&&r||n,i=function(){return this}()||Function("return this")(),u=i.regeneratorRuntime&&Object.getOwnPropertyNames(i).indexOf("regeneratorRuntime")>=0,a=u&&i.regeneratorRuntime;i.regeneratorRuntime=void 0;var c=o;if(u)i.regeneratorRuntime=a;else try{delete i.regeneratorRuntime}catch(t){i.regeneratorRuntime=void 0}var s=Object.freeze({default:c,__moduleExports:c}),f=s&&c||s,l=Math.ceil,d=Math.floor,p=function(t){return isNaN(t=+t)?0:(t>0?d:l)(t)},h=Object.freeze({default:p,__moduleExports:p}),v=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t},_=Object.freeze({default:v,__moduleExports:v}),m=h&&p||h,y=_&&v||_,g=function(t){return function(e,r){var n,o,i=y(e)+"",u=m(r),a=i.length;return 0>u||u>=a?t?"":void 0:55296>(n=i.charCodeAt(u))||n>56319||u+1===a||56320>(o=i.charCodeAt(u+1))||o>57343?t?i.charAt(u):n:t?i.slice(u,u+2):o-56320+(n-55296<<10)+65536}},b=Object.freeze({default:g,__moduleExports:g}),x=Object.freeze({default:!0,__moduleExports:!0}),O=e(function(t){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)}),E=Object.freeze({default:O,__moduleExports:O}),j=e(function(t){var e=t.exports={version:"2.5.5"};"number"==typeof __e&&(__e=e)}),w=Object.freeze({default:j,__moduleExports:j,version:j.version}),L=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t},z=Object.freeze({default:L,__moduleExports:L}),I=z&&L||z,k=function(t,e,r){if(I(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}},P=Object.freeze({default:k,__moduleExports:k}),S=function(t){return"object"==typeof t?null!==t:"function"==typeof t},T=Object.freeze({default:S,__moduleExports:S}),D=T&&S||T,M=function(t){if(!D(t))throw TypeError(t+" is not an object!");return t},N=Object.freeze({default:M,__moduleExports:M}),R=function(t){try{return!!t()}catch(t){return!0}},A=Object.freeze({default:R,__moduleExports:R}),$=A&&R||A,C=!$(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),F=Object.freeze({default:C,__moduleExports:C}),G=E&&O||E,B=G.document,U=D(B)&&D(B.createElement),V=function(t){return U?B.createElement(t):{}},W=Object.freeze({default:V,__moduleExports:V}),q=F&&C||F,K=W&&V||W,Y=!q&&!$(function(){return 7!=Object.defineProperty(K("div"),"a",{get:function(){return 7}}).a}),H=Object.freeze({default:Y,__moduleExports:Y}),X=function(t,e){if(!D(t))return t;var r,n;if(e&&"function"==typeof(r=t.toString)&&!D(n=r.call(t)))return n;if("function"==typeof(r=t.valueOf)&&!D(n=r.call(t)))return n;if(!e&&"function"==typeof(r=t.toString)&&!D(n=r.call(t)))return n;throw TypeError("Can't convert object to primitive value")},Z=Object.freeze({default:X,__moduleExports:X}),J=N&&M||N,Q=H&&Y||H,tt=Z&&X||Z,et=Object.defineProperty,rt=q?Object.defineProperty:function(t,e,r){if(J(t),e=tt(e,!0),J(r),Q)try{return et(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t},nt={f:rt},ot=Object.freeze({default:nt,__moduleExports:nt,f:rt}),it=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},ut=Object.freeze({default:it,__moduleExports:it}),at=ot&&nt||ot,ct=ut&&it||ut,st=q?function(t,e,r){return at.f(t,e,ct(1,r))}:function(t,e,r){return t[e]=r,t},ft=Object.freeze({default:st,__moduleExports:st}),lt={}.hasOwnProperty,dt=function(t,e){return lt.call(t,e)},pt=Object.freeze({default:dt,__moduleExports:dt}),ht=w&&j||w,vt=P&&k||P,_t=ft&&st||ft,mt=pt&&dt||pt,yt=function(t,e,r){var n,o,i,u=t&yt.F,a=t&yt.G,c=t&yt.S,s=t&yt.P,f=t&yt.B,l=t&yt.W,d=a?ht:ht[e]||(ht[e]={}),p=d.prototype,h=a?G:c?G[e]:(G[e]||{}).prototype;for(n in a&&(r=e),r)(o=!u&&h&&void 0!==h[n])&&mt(d,n)||(i=o?h[n]:r[n],d[n]=a&&"function"!=typeof h[n]?r[n]:f&&o?vt(i,G):l&&h[n]==i?function(t){var e=function(e,r,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,r)}return new t(e,r,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(i):s&&"function"==typeof i?vt(Function.call,i):i,s&&((d.virtual||(d.virtual={}))[n]=i,t&yt.R&&p&&!p[n]&&_t(p,n,i)))};yt.F=1,yt.G=2,yt.S=4,yt.P=8,yt.B=16,yt.W=32,yt.U=64,yt.R=128;var gt=yt,bt=Object.freeze({default:gt,__moduleExports:gt}),xt=_t,Ot=Object.freeze({default:xt,__moduleExports:xt}),Et={},jt=Object.freeze({default:Et,__moduleExports:Et}),wt={}.toString,Lt=function(t){return wt.call(t).slice(8,-1)},zt=Object.freeze({default:Lt,__moduleExports:Lt}),It=zt&&Lt||zt,kt=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==It(t)?t.split(""):Object(t)},Pt=Object.freeze({default:kt,__moduleExports:kt}),St=Pt&&kt||Pt,Tt=function(t){return St(y(t))},Dt=Object.freeze({default:Tt,__moduleExports:Tt}),Mt=Math.min,Nt=function(t){return t>0?Mt(m(t),9007199254740991):0},Rt=Object.freeze({default:Nt,__moduleExports:Nt}),At=Math.max,$t=Math.min,Ct=function(t,e){return 0>(t=m(t))?At(t+e,0):$t(t,e)},Ft=Object.freeze({default:Ct,__moduleExports:Ct}),Gt=Dt&&Tt||Dt,Bt=Rt&&Nt||Rt,Ut=Ft&&Ct||Ft,Vt=function(t){return function(e,r,n){var o,i=Gt(e),u=Bt(i.length),a=Ut(n,u);if(t&&r!=r){for(;u>a;)if((o=i[a++])!=o)return!0}else for(;u>a;a++)if((t||a in i)&&i[a]===r)return t||a||0;return!t&&-1}},Wt=Object.freeze({default:Vt,__moduleExports:Vt}),qt=G["__core-js_shared__"]||(G["__core-js_shared__"]={}),Kt=function(t){return qt[t]||(qt[t]={})},Yt=Object.freeze({default:Kt,__moduleExports:Kt}),Ht=0,Xt=Math.random(),Zt=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++Ht+Xt).toString(36))},Jt=Object.freeze({default:Zt,__moduleExports:Zt}),Qt=Yt&&Kt||Yt,te=Jt&&Zt||Jt,ee=Qt("keys"),re=function(t){return ee[t]||(ee[t]=te(t))},ne=Object.freeze({default:re,__moduleExports:re}),oe=ne&&re||ne,ie=(Wt&&Vt||Wt)(!1),ue=oe("IE_PROTO"),ae=function(t,e){var r,n=Gt(t),o=0,i=[];for(r in n)r!=ue&&mt(n,r)&&i.push(r);for(;e.length>o;)mt(n,r=e[o++])&&(~ie(i,r)||i.push(r));return i},ce=Object.freeze({default:ae,__moduleExports:ae}),se="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(","),fe=Object.freeze({default:se,__moduleExports:se}),le=ce&&ae||ce,de=fe&&se||fe,pe=Object.keys||function(t){return le(t,de)},he=Object.freeze({default:pe,__moduleExports:pe}),ve=he&&pe||he,_e=q?Object.defineProperties:function(t,e){J(t);for(var r,n=ve(e),o=n.length,i=0;o>i;)at.f(t,r=n[i++],e[r]);return t},me=Object.freeze({default:_e,__moduleExports:_e}),ye=G.document,ge=ye&&ye.documentElement,be=Object.freeze({default:ge,__moduleExports:ge}),xe=me&&_e||me,Oe=be&&ge||be,Ee=oe("IE_PROTO"),je=function(){},we=function(){var t,e=K("iframe"),r=de.length;for(e.style.display="none",Oe.appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),we=t.F;r--;)delete we.prototype[de[r]];return we()},Le=Object.create||function(t,e){var r;return null!==t?(je.prototype=J(t),r=new je,je.prototype=null,r[Ee]=t):r=we(),void 0===e?r:xe(r,e)},ze=Object.freeze({default:Le,__moduleExports:Le}),Ie=e(function(t){var e=Qt("wks"),r=G.Symbol,n="function"==typeof r;(t.exports=function(t){return e[t]||(e[t]=n&&r[t]||(n?r:te)("Symbol."+t))}).store=e}),ke=Object.freeze({default:Ie,__moduleExports:Ie}),Pe=ke&&Ie||ke,Se=at.f,Te=Pe("toStringTag"),De=function(t,e,r){t&&!mt(t=r?t:t.prototype,Te)&&Se(t,Te,{configurable:!0,value:e})},Me=Object.freeze({default:De,__moduleExports:De}),Ne=ze&&Le||ze,Re=Me&&De||Me,Ae={};_t(Ae,Pe("iterator"),function(){return this});var $e=function(t,e,r){t.prototype=Ne(Ae,{next:ct(1,r)}),Re(t,e+" Iterator")},Ce=Object.freeze({default:$e,__moduleExports:$e}),Fe=function(t){return Object(y(t))},Ge=Object.freeze({default:Fe,__moduleExports:Fe}),Be=Ge&&Fe||Ge,Ue=oe("IE_PROTO"),Ve=Object.prototype,We=Object.getPrototypeOf||function(t){return t=Be(t),mt(t,Ue)?t[Ue]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?Ve:null},qe=Object.freeze({default:We,__moduleExports:We}),Ke=!!x||x,Ye=bt&&gt||bt,He=Ot&&xt||Ot,Xe=jt&&Et||jt,Ze=Ce&&$e||Ce,Je=qe&&We||qe,Qe=Pe("iterator"),tr=!([].keys&&"next"in[].keys()),er=function(){return this},rr=function(t,e,r,n,o,i,u){Ze(r,e,n);var a,c,s,f=function(t){if(!tr&&t in h)return h[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},l=e+" Iterator",d="values"==o,p=!1,h=t.prototype,v=h[Qe]||h["@@iterator"]||o&&h[o],_=v||f(o),m=o?d?f("entries"):_:void 0,y="Array"==e&&h.entries||v;if(y&&(s=Je(y.call(new t)))!==Object.prototype&&s.next&&(Re(s,l,!0),Ke||"function"==typeof s[Qe]||_t(s,Qe,er)),d&&v&&"values"!==v.name&&(p=!0,_=function(){return v.call(this)}),Ke&&!u||!tr&&!p&&h[Qe]||_t(h,Qe,_),Xe[e]=_,Xe[l]=er,o)if(a={values:d?_:f("values"),keys:i?_:f("keys"),entries:m},u)for(c in a)c in h||He(h,c,a[c]);else Ye(Ye.P+Ye.F*(tr||p),e,a);return a},nr=Object.freeze({default:rr,__moduleExports:rr}),or=nr&&rr||nr,ir=(b&&g||b)(!0);or(String,"String",function(t){this._t=t+"",this._i=0},function(){var t,e=this._t,r=this._i;return e.length>r?(t=ir(e,r),this._i+=t.length,{value:t,done:!1}):{value:void 0,done:!0}});var ur=function(){},ar=Object.freeze({default:ur,__moduleExports:ur}),cr=function(t,e){return{value:e,done:!!t}},sr=Object.freeze({default:cr,__moduleExports:cr}),fr=ar&&ur||ar,lr=sr&&cr||sr;or(Array,"Array",function(t,e){this._t=Gt(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return t&&t.length>r?lr(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]]):(this._t=void 0,lr(1))},"values");Xe.Arguments=Xe.Array,fr("keys"),fr("values"),fr("entries");for(var dr=Pe("toStringTag"),pr="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),hr=0;pr.length>hr;hr++){var vr=pr[hr],_r=G[vr],mr=_r&&_r.prototype;mr&&!mr[dr]&&_t(mr,dr,vr),Xe[vr]=Xe.Array}var yr,gr,br,xr=Pe("toStringTag"),Or="Arguments"==It(function(){return arguments}()),Er=function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),xr))?r:Or?It(e):"Object"==(n=It(e))&&"function"==typeof e.callee?"Arguments":n},jr=Object.freeze({default:Er,__moduleExports:Er}),wr=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t},Lr=Object.freeze({default:wr,__moduleExports:wr}),zr=function(t,e,r,n){try{return n?e(J(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&J(o.call(t)),e}},Ir=Object.freeze({default:zr,__moduleExports:zr}),kr=Pe("iterator"),Pr=Array.prototype,Sr=function(t){return void 0!==t&&(Xe.Array===t||Pr[kr]===t)},Tr=Object.freeze({default:Sr,__moduleExports:Sr}),Dr=jr&&Er||jr,Mr=Pe("iterator"),Nr=ht.getIteratorMethod=function(t){if(void 0!=t)return t[Mr]||t["@@iterator"]||Xe[Dr(t)]},Rr=Object.freeze({default:Nr,__moduleExports:Nr}),Ar=Ir&&zr||Ir,$r=Tr&&Sr||Tr,Cr=Rr&&Nr||Rr,Fr=e(function(t){var e={},r={},n=t.exports=function(t,n,o,i,u){var a,c,s,f,l=u?function(){return t}:Cr(t),d=vt(o,i,n?2:1),p=0;if("function"!=typeof l)throw TypeError(t+" is not iterable!");if($r(l)){for(a=Bt(t.length);a>p;p++)if((f=n?d(J(c=t[p])[0],c[1]):d(t[p]))===e||f===r)return f}else for(s=l.call(t);!(c=s.next()).done;)if((f=Ar(s,d,c.value,n))===e||f===r)return f};n.BREAK=e,n.RETURN=r}),Gr=Object.freeze({default:Fr,__moduleExports:Fr}),Br=Pe("species"),Ur=function(t,e){var r,n=J(t).constructor;return void 0===n||void 0==(r=J(n)[Br])?e:I(r)},Vr=Object.freeze({default:Ur,__moduleExports:Ur}),Wr=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)},qr=Object.freeze({default:Wr,__moduleExports:Wr}),Kr=qr&&Wr||qr,Yr=G.process,Hr=G.setImmediate,Xr=G.clearImmediate,Zr=G.MessageChannel,Jr=G.Dispatch,Qr=0,tn={},en=function(){var t=+this;if(tn.hasOwnProperty(t)){var e=tn[t];delete tn[t],e()}},rn=function(t){en.call(t.data)};Hr&&Xr||(Hr=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return tn[++Qr]=function(){Kr("function"==typeof t?t:Function(t),e)},yr(Qr),Qr},Xr=function(t){delete tn[t]},"process"==It(Yr)?yr=function(t){Yr.nextTick(vt(en,t,1))}:Jr&&Jr.now?yr=function(t){Jr.now(vt(en,t,1))}:Zr?(br=(gr=new Zr).port2,gr.port1.onmessage=rn,yr=vt(br.postMessage,br,1)):G.addEventListener&&"function"==typeof postMessage&&!G.importScripts?(yr=function(t){G.postMessage(t+"","*")},G.addEventListener("message",rn,!1)):yr="onreadystatechange"in K("script")?function(t){Oe.appendChild(K("script")).onreadystatechange=function(){Oe.removeChild(this),en.call(t)}}:function(t){setTimeout(vt(en,t,1),0)});var nn={set:Hr,clear:Xr},on=Object.freeze({default:nn,__moduleExports:nn,set:nn.set,clear:nn.clear}),un=on&&nn||on,an=un.set,cn=G.MutationObserver||G.WebKitMutationObserver,sn=G.process,fn=G.Promise,ln="process"==It(sn),dn=function(){var t,e,r,n=function(){var n,o;for(ln&&(n=sn.domain)&&n.exit();t;){o=t.fn,t=t.next;try{o()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(ln)r=function(){sn.nextTick(n)};else if(!cn||G.navigator&&G.navigator.standalone)if(fn&&fn.resolve){var o=fn.resolve();r=function(){o.then(n)}}else r=function(){an.call(G,n)};else{var i=!0,u=document.createTextNode("");new cn(n).observe(u,{characterData:!0}),r=function(){u.data=i=!i}}return function(n){var o={fn:n,next:void 0};e&&(e.next=o),t||(t=o,r()),e=o}},pn=Object.freeze({default:dn,__moduleExports:dn});var hn=function(t){return new function(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=I(e),this.reject=I(r)}(t)},vn={f:hn},_n=Object.freeze({default:vn,__moduleExports:vn,f:hn}),mn=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}},yn=Object.freeze({default:mn,__moduleExports:mn}),gn=_n&&vn||_n,bn=function(t,e){if(J(t),D(e)&&e.constructor===t)return e;var r=gn.f(t);return(0,r.resolve)(e),r.promise},xn=Object.freeze({default:bn,__moduleExports:bn}),On=function(t,e,r){for(var n in e)r&&t[n]?t[n]=e[n]:_t(t,n,e[n]);return t},En=Object.freeze({default:On,__moduleExports:On}),jn=Pe("species"),wn=function(t){var e="function"==typeof ht[t]?ht[t]:G[t];q&&e&&!e[jn]&&at.f(e,jn,{configurable:!0,get:function(){return this}})},Ln=Object.freeze({default:wn,__moduleExports:wn}),zn=Pe("iterator"),In=!1;try{[7][zn]().return=function(){In=!0}}catch(t){}var kn,Pn,Sn,Tn,Dn=function(t,e){if(!e&&!In)return!1;var r=!1;try{var n=[7],o=n[zn]();o.next=function(){return{done:r=!0}},n[zn]=function(){return o},t(n)}catch(t){}return r},Mn=Object.freeze({default:Dn,__moduleExports:Dn}),Nn=Lr&&wr||Lr,Rn=Gr&&Fr||Gr,An=Vr&&Ur||Vr,$n=yn&&mn||yn,Cn=xn&&bn||xn,Fn=En&&On||En,Gn=Ln&&wn||Ln,Bn=Mn&&Dn||Mn,Un=un.set,Vn=(pn&&dn||pn)(),Wn=G.TypeError,qn=G.process,Kn=G.Promise,Yn="process"==Dr(qn),Hn=function(){},Xn=Pn=gn.f,Zn=!!function(){try{var t=Kn.resolve(1),e=(t.constructor={})[Pe("species")]=function(t){t(Hn,Hn)};return(Yn||"function"==typeof PromiseRejectionEvent)&&t.then(Hn)instanceof e}catch(t){}}(),Jn=function(t){var e;return!(!D(t)||"function"!=typeof(e=t.then))&&e},Qn=function(t,e){if(!t._n){t._n=!0;var r=t._c;Vn(function(){for(var n=t._v,o=1==t._s,i=0,u=function(e){var r,i,u,a=o?e.ok:e.fail,c=e.resolve,s=e.reject,f=e.domain;try{a?(o||(2==t._h&&ro(t),t._h=1),!0===a?r=n:(f&&f.enter(),r=a(n),f&&(f.exit(),u=!0)),r===e.promise?s(Wn("Promise-chain cycle")):(i=Jn(r))?i.call(r,c,s):c(r)):s(n)}catch(t){f&&!u&&f.exit(),s(t)}};r.length>i;)u(r[i++]);t._c=[],t._n=!1,e&&!t._h&&to(t)})}},to=function(t){Un.call(G,function(){var e,r,n,o=t._v,i=eo(t);if(i&&(e=$n(function(){Yn?qn.emit("unhandledRejection",o,t):(r=G.onunhandledrejection)?r({promise:t,reason:o}):(n=G.console)&&n.error&&n.error("Unhandled promise rejection",o)}),t._h=Yn||eo(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},eo=function(t){return 1!==t._h&&0===(t._a||t._c).length},ro=function(t){Un.call(G,function(){var e;Yn?qn.emit("rejectionHandled",t):(e=G.onrejectionhandled)&&e({promise:t,reason:t._v})})},no=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),Qn(e,!0))},oo=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw Wn("Promise can't be resolved itself");(e=Jn(t))?Vn(function(){var n={_w:r,_d:!1};try{e.call(t,vt(oo,n,1),vt(no,n,1))}catch(t){no.call(n,t)}}):(r._v=t,r._s=1,Qn(r,!1))}catch(t){no.call({_w:r,_d:!1},t)}}};Zn||(Kn=function(t){Nn(this,Kn,"Promise","_h"),I(t),kn.call(this);try{t(vt(oo,this,1),vt(no,this,1))}catch(t){no.call(this,t)}},(kn=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=Fn(Kn.prototype,{then:function(t,e){var r=Xn(An(this,Kn));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=Yn?qn.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&Qn(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),Sn=function(){var t=new kn;this.promise=t,this.resolve=vt(oo,t,1),this.reject=vt(no,t,1)},gn.f=Xn=function(t){return t===Kn||t===Tn?new Sn(t):Pn(t)}),Ye(Ye.G+Ye.W+Ye.F*!Zn,{Promise:Kn}),Re(Kn,"Promise"),Gn("Promise"),Tn=ht.Promise,Ye(Ye.S+Ye.F*!Zn,"Promise",{reject:function(t){var e=Xn(this);return(0,e.reject)(t),e.promise}}),Ye(Ye.S+Ye.F*(Ke||!Zn),"Promise",{resolve:function(t){return Cn(Ke&&this===Tn?Kn:this,t)}}),Ye(Ye.S+Ye.F*!(Zn&&Bn(function(t){Kn.all(t).catch(Hn)})),"Promise",{all:function(t){var e=this,r=Xn(e),n=r.resolve,o=r.reject,i=$n(function(){var r=[],i=0,u=1;Rn(t,!1,function(t){var a=i++,c=!1;r.push(void 0),u++,e.resolve(t).then(function(t){c||(c=!0,r[a]=t,--u||n(r))},o)}),--u||n(r)});return i.e&&o(i.v),r.promise},race:function(t){var e=this,r=Xn(e),n=r.reject,o=$n(function(){Rn(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}}),Ye(Ye.P+Ye.R,"Promise",{finally:function(t){var e=An(this,ht.Promise||G.Promise),r="function"==typeof t;return this.then(r?function(r){return Cn(e,t()).then(function(){return r})}:t,r?function(r){return Cn(e,t()).then(function(){throw r})}:t)}}),Ye(Ye.S,"Promise",{try:function(t){var e=gn.f(this),r=$n(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}});var io=ht.Promise,uo=Object.freeze({default:io,__moduleExports:io}),ao=uo&&io||uo,co=e(function(t){t.exports={default:ao,__esModule:!0}}),so=t(co),fo=Object.freeze({default:so,__moduleExports:co}),lo=fo&&so||fo,po=t(e(function(t,e){e.__esModule=!0;var r,n=(r=lo)&&r.__esModule?r:{default:r};e.default=function(t){return function(){var e=t.apply(this,arguments);return new n.default(function(t,r){return function o(i,u){try{var a=e[i](u),c=a.value}catch(t){return void r(t)}if(!a.done)return n.default.resolve(c).then(function(t){o("next",t)},function(t){o("throw",t)});t(c)}("next")})}}})),ho=Object.getOwnPropertySymbols,vo={f:ho},_o=Object.freeze({default:vo,__moduleExports:vo,f:ho}),mo={}.propertyIsEnumerable,yo={f:mo},go=Object.freeze({default:yo,__moduleExports:yo,f:mo}),bo=_o&&vo||_o,xo=go&&yo||go,Oo=Object.assign,Eo=!Oo||$(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=Oo({},t)[r]||Object.keys(Oo({},e)).join("")!=n})?function(t,e){for(var r=Be(t),n=arguments.length,o=1,i=bo.f,u=xo.f;n>o;)for(var a,c=St(arguments[o++]),s=i?ve(c).concat(i(c)):ve(c),f=s.length,l=0;f>l;)u.call(c,a=s[l++])&&(r[a]=c[a]);return r}:Oo,jo=Object.freeze({default:Eo,__moduleExports:Eo});Ye(Ye.S+Ye.F,"Object",{assign:jo&&Eo||jo});var wo=ht.Object.assign,Lo=Object.freeze({default:wo,__moduleExports:wo}),zo=Lo&&wo||Lo,Io=e(function(t){t.exports={default:zo,__esModule:!0}}),ko=t(Io),Po=Object.freeze({default:ko,__moduleExports:Io}),So=Po&&ko||Po,To=t(e(function(t,e){e.__esModule=!0;var r,n=(r=So)&&r.__esModule?r:{default:r};e.default=n.default||function(t){for(var e=1;arguments.length>e;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t}})),Do=t(e(function(t,e){e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}}));Ye(Ye.S+Ye.F*!q,"Object",{defineProperty:at.f});var Mo=ht.Object,No=function(t,e,r){return Mo.defineProperty(t,e,r)},Ro=Object.freeze({default:No,__moduleExports:No}),Ao=Ro&&No||Ro,$o=e(function(t){t.exports={default:Ao,__esModule:!0}}),Co=t($o),Fo=Object.freeze({default:Co,__moduleExports:$o}),Go=Fo&&Co||Fo,Bo=t(e(function(t,e){e.__esModule=!0;var r,n=(r=Go)&&r.__esModule?r:{default:r};e.default=function(){function t(t,e){for(var r=0;e.length>r;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,n.default)(t,o.key,o)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}()})),Uo=(require("colors"),function(){function t(e){Do(this,t);this.config=To({},{debug:!0},e)}return Bo(t,[{key:"fixAccents",value:function(t){var e=t,r="",n={C1:"A",E1:"á",C9:"E",E9:"é",CD:"I",ED:"í",D1:"Ñ",F1:"ñ",D3:"O",F3:"ó",DA:"U",FA:"ú",DC:"U",FC:"ü",AB:"«",BB:"»",BF:"¿",A1:"¡",80:"€","20A7":"Pts"};for(r in n)e.replace("&#x"+r,n[r]);return e}}]),t}());return function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.file,n=void 0===r?this.throwIfMissing("file"):r,o=e.config,i=void 0===o?{}:o;Do(this,t);var u=require("open_console");this.file=n,this.config=To({},{cancelled:!1,debug:!0},i),this.help=new Uo,this.debug=new u({silent:!this.config.debug}),this.$=null}return Bo(t,[{key:"process",value:function(){var t=po(f.mark(function t(){var e,r,n;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(""==this.file){t.next=15;break}return this.debug.setPrefix({prefix:"dsl_parser",color:"yellow"}),this.debug.title({title:"DSL Parser for "+this.file,color:"green"}),this.debug.time({id:"process"}),e=require("cheerio"),require("path"),r=require("fs").promises,n="",t.next=9,r.readFile(this.file,"utf-8");case 9:n=t.sent,this.debug.outT({message:"fixing accents"}),n=this.help.fixAccents(n),this.$=e.load(n,{ignoreWhitespace:!1,xmlMode:!0,decodeEntities:!1}),this.config.cancelled||(this.debug.outT({message:"removing cancelled nodes from tree"}),this.$("icon[BUILTIN*=button_cancel]").parent().remove()),this.debug.timeEnd({id:"process"});case 15:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getParser",value:function(){return this.$}},{key:"getNodes",value:function(){var t=po(f.mark(function t(){var e,r,n,o,i,u,a,c=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=c.text,l=c.attribute,d=c.attribute_value,p=c.icon,h=c.level,v=c.link,_=c.recurse,m=void 0===_||_;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=[],r=null,n=this,s?r=this.$("node[text*="+(""+s).replace(/ /g,"\\ ")+"]"):l?(o=l.replace(/ /g,"\\ "),r=this.$("attribute[name*="+o+"]").parent("node")):d?(i=d.replace(/ /g,"\\ "),r=this.$("attribute[value*="+i+"]").parent("node")):p?(u=p.replace(/ /g,"\\ "),r=this.$("icon[builtin*="+u+"]").parent("node")):h?r=this.$("node").filter(function(t,e){var r=-1;try{r=n.$(e).parents("node").length+1}catch(t){}return r===h}):v?(a=v.replace(/ /g,"\\ "),r=this.$("node[link*="+a+"]")):r=this.$("node"),null!=r&&r.map(function(){var t=po(f.mark(function t(r,o){var i;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===(i=n.$(o)).attr("ID")){t.next=6;break}return t.next=4,n.getNode({id:i.attr("ID"),recurse:m});case 4:e.push(t.sent);case 6:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}()),t.abrupt("return",e);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getNode",value:function(){var t=po(f.mark(function t(){var e,r,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=n.id,i=void 0===o?this.throwIfMissing("id"):o,u=n.recurse,a=void 0===u||u,c=n.justlevel,s=n.dates,l=void 0===s||s,d=n.$,p=void 0!==d&&d;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(null!==this.$){t.next=2;break}throw Error("call process() first!");case 2:return e=this,r={level:-1,text:"",text_rich:"",text_node:"",image:"",cloud:{used:!1,bgcolor:""},arrows:[],nodes:[],font:{face:"SansSerif",size:12,bold:!1,italic:!1},style:"",color:"",bgcolor:"",link:"",position:"",attributes:[],icons:[],date_modified:new Date,date_created:new Date,valid:!0},e.$("node[ID="+i+"]").each(function(){var t=po(f.mark(function t(n,o){var i;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(i=e.$(o),-1,r.id=i.attr("ID"),r.level=i.parents("node").length+1,!c||r.level==c){t.next=6;break}return r.valid=!1,t.abrupt("return",!1);case 6:return p&&(r.$=i),void 0!==i.attr("LINK")&&(r.link=i.attr("LINK").split("#").join("")),void 0!==i.attr("POSITION")&&(r.position=i.attr("POSITION")),void 0!==i.attr("COLOR")&&(r.color=i.attr("COLOR")),void 0!==i.attr("BACKGROUND_COLOR")&&(r.bgcolor=i.attr("BACKGROUND_COLOR")),void 0!==i.attr("STYLE")&&(r.style=i.attr("STYLE")),void 0!==i.attr("TEXT")&&(r.text=i.attr("TEXT")),l&&(void 0!==i.attr("CREATED")&&(r.date_created=new Date(parseFloat(i.attr("CREATED")))),void 0!==i.attr("MODIFIED")&&(r.date_modified=new Date(parseFloat(i.attr("MODIFIED"))))),i.find("node[ID="+r.id+"] > attribute").map(function(t,n){var o={},i=e.$(n);o[i.attr("NAME")]=i.attr("VALUE"),r.attributes.push(o)}),i.find("node[ID="+r.id+"] > icon").map(function(t,n){r.icons.push(e.$(n).attr("BUILTIN"))}),i.find("node[ID="+r.id+"] > font").map(function(t,n){var o=e.$(n);r.font.face=o.attr("NAME"),r.font.size=o.attr("SIZE"),void 0!==o.attr("BOLD")&&(r.font.bold=o.attr("BOLD")),void 0!==o.attr("ITALIC")&&(r.font.italic=o.attr("ITALIC"))}),i.find("node[ID="+r.id+"] > cloud").map(function(t,n){var o=e.$(n);r.cloud.used=!0,void 0!==o.attr("COLOR")&&(r.cloud.bgcolor=o.attr("COLOR"))}),i.find("node[ID="+r.id+"] > richcontent[TYPE=NODE] body").map(function(t,n){r.text_rich=e.$(n).html(),e.$(n).find("img[src]").map(function(t,n){r.image=e.$(n).attr("src")})}),i.find("node[ID="+r.id+"] > richcontent[TYPE=NOTE] body").map(function(t,n){r.text_node=e.$(n).text()}),i.find("node[ID="+r.id+"] > arrowlink").map(function(t,n){var o=e.$(n),i={target:"",color:"",style:""},u={};i.target=o.attr("DESTINATION"),void 0!==o.attr("COLOR")&&(i.color=o.attr("COLOR")),u.type=o.attr("STARTARROW")+"-"+o.attr("ENDARROW"),i.style=-1!=u.type.indexOf("None-Default")?"source-to-target":-1!=u.type.indexOf("Default-None")?"target-to-source":"both-ways",r.arrows.push(i)}),1==a&&i.find("node").map(function(){var t=po(f.mark(function t(n,o){var i,u;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return i=e.$(o),t.next=3,e.getNode({id:i.attr("ID"),recurse:a,justlevel:r.level+1});case 3:(u=t.sent).valid&&(delete u.valid,r.nodes.push(u));case 5:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}()),t.abrupt("return",!1);case 23:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}()),c||delete r.valid,t.abrupt("return",r);case 7:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getParentNode",value:function(){var t=po(f.mark(function t(){var e,r,n,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=o.id,u=void 0===i?this.throwIfMissing("id"):i,a=o.recurse,c=void 0!==a&&a;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(null!==this.$){t.next=2;break}throw Error("call process() first!");case 2:if(e=this.$("node[ID="+u+"]").parent("node"),r={},n=this,void 0===e.attr("ID")){t.next=8;break}return t.next=7,n.getNode({id:e.attr("ID"),recurse:c});case 7:r=t.sent;case 8:return t.abrupt("return",r);case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getParentNodesIDs",value:function(){var t=po(f.mark(function t(){var e,r,n,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=o.id,u=void 0===i?this.throwIfMissing("id"):i,a=o.array,c=void 0!==a&&a;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this.$("node[ID="+u+"]").parents("node"),r=[],n=this,e.map(function(t,e){var o=n.$(e);void 0!==o.attr("ID")&&r.push(o.attr("ID"))}),r.pop(),!c){t.next=8;break}return t.abrupt("return",r);case 8:return t.abrupt("return",r.join(","));case 9:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getChildrenNodesIDs",value:function(){var t=po(f.mark(function t(){var e,r,n,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=o.id,u=void 0===i?this.throwIfMissing("id"):i,a=o.array,c=void 0!==a&&a;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this.$("node[ID="+u+"]").find("node"),r=[],n=this,e.map(function(t,e){var o=n.$(e);void 0!==o.attr("ID")&&r.push(o.attr("ID"))}),!c){t.next=7;break}return t.abrupt("return",r);case 7:return t.abrupt("return",r.join(","));case 8:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"getBrotherNodesIDs",value:function(){var t=po(f.mark(function t(){var e,r,n,o,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=i.id,a=void 0===u?this.throwIfMissing("id"):u,c=i.before,s=void 0===c||c,l=i.after,d=void 0===l||l;return f.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.getNode({id:a,recurse:!1,$:!0});case 2:if(e=t.sent,r=[],s)for(n=e.$.prev("node");void 0!==n.get(0);)r.push(n.get(0).attribs.ID),n=n.prev("node");if(d)for(o=e.$.next("node");void 0!==o.get(0);)r.push(o.get(0).attribs.ID),o=o.next("node");return t.abrupt("return",r.join(","));case 7:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"throwIfMissing",value:function(t){throw Error("Missing "+t+" parameter!")}},{key:"findVariables",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.text,r=void 0===e?this.throwIfMissing("text"):e,n=t.symbol,o=void 0===n?"**":n,i=t.symbol_closing,u=void 0===i?"**":i,a=t.array,c=void 0!==a&&a,s=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},f=RegExp(s(o)+"(.*?)"+s(u),"g"),l=[],d=!1;!d;){var p=RegExp(f,"gim"),h=r.match(p);for(var v in h)l.push(h[v].split(o).join("").split(u).join(""));d=!0}return c?l:l.join(",")}}]),t}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
